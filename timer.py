import json
import time
import threading
import keyboard
from datetime import datetime, timedelta
from typing import Dict, List, Callable, Any
from GUI.gui_timeout import gui_timeout


class TimerSystem:
    def __init__(self, config_file: str = "timers_config.json"):
        self.config_file = config_file if config_file.endswith(".json") else config_file + ".json"
        self.data = self.load_config()
        self.active_timers: Dict[str, threading.Timer] = {}
        self.timer_end_times: Dict[str, datetime] = {}

        print("–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–∞–π–º–µ—Ä–æ–≤:")
        for timer in self.data.get("timers", []):
            print(f"  {timer['name']}: {timer['interval']}ms, –∫–ª–∞–≤–∏—à–∞ '{timer['key']}'")

    def load_config(self) -> Dict[str, Any]:
        with open(f"Timers/{self.config_file}", "r") as f:
            return json.load(f)

    def start_timer(self, timer_name: str):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä –ø–æ –∏–º–µ–Ω–∏"""
        timer_config = None
        for timer in self.data.get("timers", []):
            if timer["name"] == timer_name:
                timer_config = timer
                break

        if not timer_config:
            print(f"–¢–∞–π–º–µ—Ä {timer_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return

        if timer_name in self.active_timers:
            print(f"–¢–∞–π–º–µ—Ä {timer_name} —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
        end_time = datetime.now() + timedelta(seconds=timer_config["interval"])
        self.timer_end_times[timer_name] = end_time

        def timer_callback():
            # –í—ã–∑—ã–≤–∞–µ–º callback —Ñ—É–Ω–∫—Ü–∏—é
            print(f"‚è∞ –¢–ê–ô–ú–ï–† '{timer_name}' –ó–ê–í–ï–†–®–ï–ù! –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}")

            gui_timeout(timer_name=timer_name)

            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤
            if timer_name in self.active_timers:
                del self.active_timers[timer_name]
            if timer_name in self.timer_end_times:
                del self.timer_end_times[timer_name]

        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        interval_seconds = timer_config["interval"]
        self.active_timers[timer_name] = threading.Timer(interval_seconds, timer_callback)
        self.active_timers[timer_name].start()

        print(f"‚ñ∂Ô∏è –ó–∞–ø—É—â–µ–Ω —Ç–∞–π–º–µ—Ä '{timer_name}' –Ω–∞ {interval_seconds / 60:.1f} –º–∏–Ω—É—Ç")
        print(f"   –ó–∞–≤–µ—Ä—à–∏—Ç—Å—è –≤: {end_time.strftime('%H:%M:%S')}")

    def stop_timer(self, timer_name: str):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä"""
        if timer_name in self.active_timers:
            self.active_timers[timer_name].cancel()
            del self.active_timers[timer_name]
            if timer_name in self.timer_end_times:
                del self.timer_end_times[timer_name]
            print(f"‚èπÔ∏è –¢–∞–π–º–µ—Ä '{timer_name}' –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            print(f"–¢–∞–π–º–µ—Ä '{timer_name}' –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")

    def show_status(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Ç–∞–π–º–µ—Ä–æ–≤"""
        print("\n" + "=" * 50)
        print("–°–¢–ê–¢–£–° –¢–ê–ô–ú–ï–†–û–í:")
        print("=" * 50)

        if not self.active_timers:
            print("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤")
            return

        current_time = datetime.now()
        for timer_name, end_time in self.timer_end_times.items():
            remaining = end_time - current_time
            if remaining.total_seconds() > 0:
                mins, secs = divmod(int(remaining.total_seconds()), 60)
                print(f"‚è∞ {timer_name}: –æ—Å—Ç–∞–ª–æ—Å—å {mins} –º–∏–Ω {secs} —Å–µ–∫")
            else:
                print(f"‚è∞ {timer_name}: –∑–∞–≤–µ—Ä—à–µ–Ω")

    def setup_keyboard_hotkeys(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤"""
        print("\n–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à...")

        for timer in self.data.get("timers", []):
            key = timer["key"]
            name = timer["name"]

            # –°–æ–∑–¥–∞–µ–º –∑–∞–º—ã–∫–∞–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Ç–∞–π–º–µ—Ä–∞
            def create_callback(timer_name):
                def callback():
                    print(f"\nüéØ –ù–∞–∂–∞—Ç–∞ –∫–ª–∞–≤–∏—à–∞ {key} - –∑–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ '{timer_name}'")
                    self.start_timer(timer_name)
                    self.show_status()

                return callback

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥–æ—Ä—è—á—É—é –∫–ª–∞–≤–∏—à—É
            keyboard.add_hotkey(key, create_callback(name))
            print(f"  {key} ‚Üí {name}")

    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É —Ç–∞–π–º–µ—Ä–æ–≤"""
        print("üöÄ –°–∏—Å—Ç–µ–º–∞ —Ç–∞–π–º–µ—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞!")
        print("–ù–∞–∂–º–∏—Ç–µ Ctrl+Esc –¥–ª—è –≤—ã—Ö–æ–¥–∞")


        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è —Ç–∞–π–º–µ—Ä–æ–≤
        self.setup_keyboard_hotkeys()

        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –æ–∂–∏–¥–∞–Ω–∏—è
        try:
            keyboard.wait('ctrl+esc')  # –û–∂–∏–¥–∞–µ–º Escape –¥–ª—è –≤—ã—Ö–æ–¥–∞
        except KeyboardInterrupt:
            pass
        finally:
            self.stop_all()
        return True


    def stop_all(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã –∏ –≤—ã—Ö–æ–¥–∏—Ç"""
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Ç–∞–π–º–µ—Ä–æ–≤...")
        for timer_name in list(self.active_timers.keys()):
            self.stop_timer(timer_name)